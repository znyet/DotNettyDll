1、 编码器
public class ProtobufEncoder extends MessageToByteEncoder<ProtoMsg.Message> {
​
   @Override
   protected void encode(ChannelHandlerContext ctx, ProtoMsg.Message msg, ByteBuf out)
         throws Exception {
      byte[] bytes = msg.toByteArray();// 将对象转换为byte
      int length = bytes.length;// 读取消息的长度
​
      ByteBuf buf = Unpooled.buffer(2 + length);
      buf.writeShort(length);// 先将消息长度写入，也就是消息头
      buf.writeBytes(bytes);// 消息体中包含我们要发送的数据
      out.writeBytes(buf);
​
   }

}

2、解码器
public class ProtobufDecoder extends ByteToMessageDecoder {
   @Override
   protected void decode(ChannelHandlerContext ctx, ByteBuf in,
         List<Object> out) throws Exception {
      // 标记一下当前的readIndex的位置
      in.markReaderIndex();
      // 判断包头长度
      if (in.readableBytes() < 2) {// 不够包头
         return;
      }
​
      // 读取传送过来的消息的长度。
      int length = in.readUnsignedShort();
​
      // 长度如果小于0
      if (length < 0) {// 非法数据，关闭连接
         ctx.close();
      }
​
      if (length > in.readableBytes()) {// 读到的消息体长度如果小于传送过来的消息长度
         // 重置读取位置
         in.resetReaderIndex();
         return;
      }
​
      ByteBuf frame = Unpooled.buffer(length);
      in.readBytes(frame);
      try {
         byte[] inByte = frame.array();
​
         // 字节转成对象
         ProtoMsg.Message msg = ProtoMsg.Message.parseFrom(inByte);

         if (msg != null) {
            // 获取业务消息头
            out.add(msg);
         }
      } catch (Exception e) {
         LOG.info(ctx.channel().remoteAddress() + ",decode failed.", e);
      }
​
   }
}